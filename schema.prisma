// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id               String            @id @default(dbgenerated("gen_random_uuid()"))
  email            String            @unique
  password         String
  role             Role              @default(FREEUSER)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  QRCodeSettings   QRCodeSettings[]
  GeneratedQRCodes GeneratedQRCode[]
  AuditLog         AuditLog[]
}

model QRCodeSettings {
  id              String        @id @default(dbgenerated("gen_random_uuid()"))
  userId          String
  customization   Customization @relation(fields: [customizationId], references: [id], onDelete: Cascade)
  customizationId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  User            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Customization {
  id               String               @id @default(dbgenerated("gen_random_uuid()"))
  size             Int // e.g., 200 for 200x200
  color            String // e.g., '#000000' for black
  errorCorrection  ErrorCorrectionLevel
  format           Format[]
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  QRCodeSettings   QRCodeSettings[]
  GeneratedQRCodes GeneratedQRCode[]
}

model GeneratedQRCode {
  id              String        @id @default(dbgenerated("gen_random_uuid()"))
  data            String // URL, text, contact info, etc.
  customization   Customization @relation(fields: [customizationId], references: [id], onDelete: Cascade)
  customizationId String
  createdAt       DateTime      @default(now())
  userId          String
  User            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  image           Bytes // This could be the path/URL depending on how you store the generated QR code image
}

model AuditLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  action    String
  details   Json // Details about the action performed, could include previous and new values etc.
  timestamp DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  FREEUSER
  SUBSCRIBEDUSER
}

enum ErrorCorrectionLevel {
  L
  M
  Q
  H
}

enum Format {
  SVG
  PNG
  JPEG
}

